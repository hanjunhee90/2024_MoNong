// 게시판 컨트롤러
// 클라이언트 요청을 처리

package com.future.blue.board.web;

import javax.validation.Valid;
import java.io.File;
import java.util.List;
import java.util.UUID;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.beans.factory.annotation.Value;
import org.springframework.http.ResponseEntity;
import org.springframework.security.core.annotation.AuthenticationPrincipal;
import org.springframework.security.core.userdetails.UserDetails;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

import com.future.blue.board.service.BoardService;
import com.future.blue.board.vo.BoardCommentVO;
import com.future.blue.board.vo.BoardLikeVO;
import com.future.blue.board.vo.BoardVO;
import com.future.blue.board.vo.SearchVO;


@Controller
@RequestMapping("/board")
public class BoardController {

	@Value("#{util['file.upload.path']}")
    private String CURR_IMAGE_PATH;
	
	@Value("${file.upload-dir}")
    private String uploadDir;
	
	// 서비스 클래스 주입 (DB에서 게시글 정보를 가져오기 위해)
    @Autowired
    private BoardService boardService;

    // 게시글 목록 조회
    @RequestMapping("/list")
    public String getBoardList( @ModelAttribute("searchVO") SearchVO searchVO, Model model) {
        List<BoardVO> boardList = boardService.getBoardList(searchVO);
        model.addAttribute("boardList", boardList);
        return "board/free/list";
    }

    // 게시글 상세 조회
    @GetMapping("/detail")
    public String detail(@RequestParam("boardId") int boardId, Model model) {
    	// 서비스 호출해서 게시글 상세 정보 가져오기
        BoardVO board = boardService.getBoardDetail(boardId);
        if (board == null) {
            return "error/404"; // 존재하지 않는 게시글 처리
        }
        List<BoardCommentVO> comments = boardService.getComments(boardId);
        model.addAttribute("board", board);
        model.addAttribute("comments", comments);
        return "board/free/detail";
    }

    // 게시글 작성 페이지
    @GetMapping("/create")
    public String createBoardForm() {
        return "board/free/create";
    }

    // 게시글 작성 처리
    @PostMapping("/create")
    public String createBoard(@ModelAttribute BoardVO board) {
    	// 작성자 정보를 클라이언트에서 전달받아 사용
        boardService.createBoard(board);
        return "redirect:/board/free/list";
    }
    
    // 게시글 저장
    @PostMapping("/save")
    public String saveBoard(@Valid @ModelAttribute BoardVO board, @RequestParam("file") MultipartFile file, Model model) {
        try {
        	// 파일 업로드 처리
	        if (!file.isEmpty()) {
	            File uploadDirFile = new File(uploadDir);
	            if (!uploadDirFile.exists()) {
	                uploadDirFile.mkdirs();
	            }

	            String fileName = UUID.randomUUID().toString() + "_" + file.getOriginalFilename();
	            if (!file.getContentType().startsWith("image/")) {
                    throw new IllegalArgumentException("이미지 파일만 업로드 가능합니다.");
                }
	            
	            File destination = new File(uploadDir + fileName);
	            file.transferTo(destination);
	            board.setBoardFile(fileName);
	        }
	       
	        // 게시글 저장 로직 호출(Service)
	        boardService.saveBoard(board);
	            
            return "redirect:/board/list";	// 저장 후 목록 페이지로 이동
        } catch (Exception e) {
            e.printStackTrace();
            model.addAttribute("errorMessage", "게시글 저장 중 오류가 발생했습니다.");
            return "board/free/create";	// 에러 시 다시 작성 페이지로 이동
        }
    }
     
    // 게시글 수정 페이지
    @GetMapping("/edit/{boardId}")
    public String editBoardForm(@PathVariable int boardId, Model model) {
        BoardVO board = boardService.getBoardDetail(boardId);
        if (board == null) {
            return "error/404";
        }
        model.addAttribute("board", board);
        return "board/free/edit";
    }

    // 게시글 수정 처리
    @PostMapping("/edit")
    public String editBoard(BoardVO board) {
    	if (boardService.updateBoard(board) == 0) {
//    		throw new IllegalStateException("게시글 수정에 실패했습니다.");
    		return "error/404"; // 수정 실패 시 처리
        }
        return "redirect:/board/detail/" + board.getBoardId();
    }

	// 게시글 삭제
	@GetMapping("/delete/{boardId}") 
	public String deleteBoard(@PathVariable int boardId) {
		if (boardService.deleteBoard(boardId) == 0) {
            return "error/404"; // 삭제 실패 시 처리
        }
        return "redirect:/board/free/list"; 
	}
	
	// 댓글 작성
	@PostMapping("/comment")
    public String addComment(@RequestParam int boardId, @RequestParam String content, @AuthenticationPrincipal UserDetails userDetails) {
		if (userDetails == null) {
	        return "error/unauthorized"; // 로그인되지 않은 사용자 처리
	    }
		
		BoardCommentVO comment = new BoardCommentVO();
        comment.setBoardId(boardId);
        comment.setCommentContent(content);
        comment.setWriter(userDetails.getUsername()); // 로그인된 사용자 정보 -> 작성자에 자동으로 설정
        boardService.addComment(comment);
        
        return "redirect:/board/detail/" + boardId;
    }
	
	// 좋아요 추가
	@PostMapping("/like")
    public ResponseEntity<String> addLike(@RequestBody BoardLikeVO like) {
        boardService.addLike(like);
        return ResponseEntity.ok("좋아요가 추가되었습니다.");
    }

    // 좋아요 제거
    @PostMapping("/like/remove")
    public ResponseEntity<String> removeLike(@RequestBody BoardLikeVO like) {
        boardService.removeLike(like);
        return ResponseEntity.ok("좋아요가 제거되었습니다.");
    }
	 
}
