// 게시판 비즈니스 로직 

package com.future.blue.board.service;

import java.util.List;

import com.future.blue.board.dao.BoardDAO;
import com.future.blue.board.vo.BoardCommentVO;
import com.future.blue.board.vo.BoardLikeVO;
import com.future.blue.board.vo.BoardVO;
import com.future.blue.board.vo.SearchVO;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.dao.DataAccessException;
import org.springframework.stereotype.Service;
import org.springframework.transaction.annotation.Transactional;
import org.springframework.web.multipart.MultipartFile;

@Service
public class BoardService {

	// Repository 주입 (DB에서 데이터를 조회)
	@Autowired
	private BoardDAO boardDAO;

	// 게시글 목록 조회
    public List<BoardVO> getBoardList(SearchVO searchVO) {
        return boardDAO.getBoardList(searchVO);
    }

//    // 게시글 상세 조회
//    @Transactional
//    public BoardVO getBoardDetail(int boardId) {
//        try {
//            boardDAO.increaseBoardHit(boardId); // 조회수 증가
//            return boardDAO.getBoardDetail(boardId);
//        } catch (DataAccessException e) {
//            throw new RuntimeException("게시글 상세 조회 중 오류 발생", e);
//        }
//    }

	// 게시글 작성
	public int createBoard(BoardVO board) {
		try {
            return boardDAO.createBoard(board);
        } catch (DataAccessException e) {
            throw new RuntimeException("게시글 작성 중 오류 발생", e);
        }
    }
	
	// 게시글 저장(파일 포함)
	@Transactional
	public void saveBoard(BoardVO boardVO, MultipartFile file) {
		// 1. 게시글 정보 저장
        boardDAO.insertBoard(boardVO);
            
		// 2. 파일 처리 (파일이 있을 경우)
    	if (file != null && !file.isEmpty()) {
    		String fileName = file.getOriginalFilename();
    		// 파일 저장 로직 추가 (예: 서버 경로에 저장)
    		System.out.println("파일 저장됨: " + fileName);
    	}
	}
	
	// 게시글 저장(파일 없이)
	public void saveBoard(BoardVO boardVO) {
        saveBoard(boardVO, null); // 파일 없이 호출 시 null 전달
    }
	
	// 게시글 상세 조회 + 조회수 증가
    @Transactional
    public BoardVO getBoardDetail(int boardId) {
        try {
            boardDAO.increaseBoardHit(boardId); // 조회수 증가
            return boardDAO.getBoardDetail(boardId); // 게시글 상세 조회
        } catch (DataAccessException e) {
            throw new RuntimeException("게시글 상세 조회 중 오류 발생", e);
        }
    }
		
	// 게시글 수정
	@Transactional
	public int updateBoard(BoardVO board) {
	    try {
	        return boardDAO.updateBoard(board);
	    } catch (DataAccessException e) {
	        throw new RuntimeException("게시글 수정 중 오류 발생", e);
	    }
	}

	// 게시글 삭제
	public int deleteBoard(int boardId) {
		try {
            return boardDAO.deleteBoard(boardId);
        } catch (DataAccessException e) {
            throw new RuntimeException("게시글 삭제 중 오류 발생", e);
        }
    }

//	// 파일 추가
//	public int addBoardFile(BoardFileVO file) {
//		try {
//            return boardDAO.addBoardFile(file);
//        } catch (DataAccessException e) {
//            throw new RuntimeException("파일 추가 중 오류 발생", e);
//        }
//    }
//
//	// 특정 게시글의 파일 목록 조회
//	public List<BoardFileVO> getBoardFiles(int boardId) {
//		try {
//            return boardDAO.getBoardFiles(boardId);
//        } catch (DataAccessException e) {
//            throw new RuntimeException("파일 목록 조회 중 오류 발생", e);
//        }
//    }

	// 댓글 추가
	public void addComment(BoardCommentVO comment) {
        try {
            boardDAO.addComment(comment);
        } catch (DataAccessException e) {
            throw new RuntimeException("댓글 작성 중 오류 발생", e);
        }
    }

	// 특정 게시글의 댓글 목록 조회
	public List<BoardCommentVO> getComments(int boardId) {
		try {
            return boardDAO.getComments(boardId);
        } catch (DataAccessException e) {
            throw new RuntimeException("댓글 목록 조회 중 오류 발생", e);
        }
    }

	// 댓글 삭제
	public int deleteComment(int commentId) {
		try {
            return boardDAO.deleteComment(commentId);
        } catch (DataAccessException e) {
            throw new RuntimeException("댓글 삭제 중 오류 발생", e);
        }
    }

	// 좋아요 추가
	public int addLike(BoardLikeVO like) {
		try {
            return boardDAO.addLike(like);
        } catch (DataAccessException e) {
            throw new RuntimeException("좋아요 추가 중 오류 발생", e);
        }
    }

	// 좋아요 제거
    @Transactional
    public void removeLike(BoardLikeVO like) {
        try {
            boardDAO.removeLike(like);
        } catch (DataAccessException e) {
            throw new RuntimeException("좋아요 제거 중 오류 발생", e);
        }
    }

	// 특정 게시글의 좋아요 수 조회
	public int getLikeCount(int boardId) {
		try {
            return boardDAO.getLikeCount(boardId);
        } catch (DataAccessException e) {
            throw new RuntimeException("좋아요 수 조회 중 오류 발생", e);
        }
    }

	// 특정 사용자가 게시글에 좋아요를 눌렀는지 확인
	public int isLikedByUser(int boardId, String memId) {
		try {
            return boardDAO.isLikedByUser(boardId, memId);
        } catch (DataAccessException e) {
            throw new RuntimeException("좋아요 여부 확인 중 오류 발생", e);
        }
    }
	
	// 파일 업로드 처리 (Service로 이동)
    private String processFileUpload(MultipartFile file) throws Exception {
        if (file == null || file.isEmpty()) {
            return null; // 파일이 없으면 처리 안 함
        }
        String originalFileName = file.getOriginalFilename();
        String fileExtension = originalFileName.substring(originalFileName.lastIndexOf("."));
        String storedFileName = java.util.UUID.randomUUID() + fileExtension;

        java.io.File destination = new java.io.File("C:/upload/", storedFileName);
        if (!destination.getParentFile().exists()) {
            destination.getParentFile().mkdirs(); // 디렉토리 생성
        }
        file.transferTo(destination);
        return storedFileName;
    }
}
