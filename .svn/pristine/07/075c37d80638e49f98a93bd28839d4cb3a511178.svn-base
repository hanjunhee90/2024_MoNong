<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "//mybatis.org/DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.future.blue.diary.dao.IDiaryDAO">

    <!-- 1. 다이어리 생성 (USE_YN은 Y로 설정) -->
    <insert id="createDiary"
            parameterType="com.future.blue.diary.vo.DiaryVO">
        INSERT INTO DIARY (
            DIARY_ID,
            DIARY_WRITER,
            DIARY_TITLE,
            DIARY_CONTENTS,
            CREATE_DT,
            UPDATE_DT,
            MEM_ID,
            DIARY_HIT,
            USE_YN,
            DIARY_IMAGE
        ) VALUES (
            DIARY_SEQ.NEXTVAL, -- 시퀀스에서 ID 생성
            #{diaryWriter},
            #{diaryTitle},
            #{diaryContents},
            CURRENT_TIMESTAMP,
            CURRENT_TIMESTAMP,
            #{memId},
            0,
            'Y',  <!-- 기본값은 Y -->
            #{diaryImage}
        )
    </insert>

    <!-- 2. 다이어리 삭제 (USE_YN을 'N'으로 변경) -->
    <update id="deleteDiary" parameterType="int">
        UPDATE DIARY
        SET USE_YN = 'N'
        WHERE DIARY_ID = #{diaryId}
    </update>

    <!-- 3-1. 다이어리 조회 (아이디를 이용한 조회, USE_YN='Y'인 것만 조회) -->
    <select id="selectDiaryById" parameterType="int" resultMap="diaryResultMap">
        SELECT * FROM DIARY
        WHERE DIARY_ID = #{diaryId} AND USE_YN = 'Y'
    </select>

    <!-- 3-2. 다이어리 수정 (조회된 데이터를 바탕으로 수정) -->
    <update id="updateDiary" parameterType="com.future.blue.diary.vo.DiaryVO">
        UPDATE DIARY
        SET
            DIARY_TITLE = #{diaryTitle},
            DIARY_CONTENTS = #{diaryContents},
            UPDATE_DT = CURRENT_TIMESTAMP,
            DIARY_IMAGE = #{diaryImage}
        WHERE DIARY_ID = #{diaryId} AND USE_YN = 'Y'
    </update>

    <!-- 4-1. 개별 다이어리 조회 (좋아요 포함, USE_YN='Y'인 것만 조회) -->
    <select id="selectDiaryWithLikes" parameterType="int" resultMap="diaryWithLikesResultMap">
        SELECT D.*, L.MEM_ID AS LIKER_ID
        FROM DIARY D
        LEFT JOIN DIARY_LIKES L ON D.DIARY_ID = L.DIARY_ID
        WHERE D.DIARY_ID = #{diaryId} AND D.USE_YN = 'Y'
    </select>

    <!-- 4-2. 다이어리 리스트 조회 (페이지네이션 포함, USE_YN='Y'인 것만 조회) -->
    <select id="selectDiaryList" parameterType="map" resultMap="diaryResultMap">
        SELECT
            D.DIARY_ID,
            D.DIARY_TITLE,
            D.DIARY_WRITER,
            D.CREATE_DT,
            D.DIARY_HIT,
            D.DIARY_IMAGE,
            COUNT(L.DIARY_ID) AS LIKE_COUNT
        FROM DIARY D
        LEFT JOIN DIARY_LIKES L ON D.DIARY_ID = L.DIARY_ID
        WHERE D.USE_YN = 'Y'
        <if test="search != null and search != ''">
            AND (
                D.DIARY_TITLE LIKE CONCAT('%', #{search}, '%')
                OR D.DIARY_WRITER LIKE CONCAT('%', #{search}, '%')
                OR D.DIARY_CONTENTS LIKE CONCAT('%', #{search}, '%')
            )
        </if>
        <if test="search == null or search == ''">
            AND 1 = 1 <!-- search가 없으면 조건을 추가하지 않음 -->
        </if>
        GROUP BY D.DIARY_ID
        ORDER BY
            CASE
                WHEN #{sortBy} = 'new' THEN D.CREATE_DT DESC
                WHEN #{sortBy} = 'popular' THEN LIKE_COUNT DESC
                WHEN #{sortBy} = 'old' THEN D.CREATE_DT ASC
                ELSE D.CREATE_DT DESC
            END
        FETCH FIRST 8 ROWS ONLY
    </select>

    <!-- 4-3. 총 페이지 계산 (USE_YN='Y'인 것만 조회) -->
    <select id="selectDiaryCount" parameterType="map" resultType="int">
        SELECT COUNT(D.DIARY_ID)
        FROM DIARY D
        LEFT JOIN DIARY_LIKES L ON D.DIARY_ID = L.DIARY_ID
        WHERE D.USE_YN = 'Y'
        <if test="search != null and search != ''">
            AND (
                D.DIARY_TITLE LIKE CONCAT('%', #{search}, '%')
                OR D.DIARY_WRITER LIKE CONCAT('%', #{search}, '%')
                OR D.DIARY_CONTENTS LIKE CONCAT('%', #{search}, '%')
            )
        </if>
        <if test="search == null or search == ''">
            AND 1 = 1 <!-- search가 없으면 조건을 추가하지 않음 -->
        </if>
    </select>

    <!-- 다이어리 조회수 증가 -->
    <update id="incrementDiaryHit">
        UPDATE DIARY
        SET DIARY_HIT = DIARY_HIT + 1
        WHERE DIARY_ID = #{diaryId} AND USE_YN = 'Y'
    </update>

    <!-- 다이어리 좋아요 추가 -->
    <insert id="insertLike">
        INSERT INTO DIARY_LIKES (DIARY_ID, MEM_ID)
        VALUES (#{diaryId}, #{memId})
    </insert>

    <!-- 다이어리 좋아요 취소 -->
    <delete id="deleteLike">
        DELETE FROM DIARY_LIKES
        WHERE DIARY_ID = #{diaryId} AND MEM_ID = #{memId}
    </delete>

    <!-- 다이어리 좋아요 목록 조회 -->
    <select id="selectLikes" parameterType="int" resultType="String">
        SELECT MEM_ID
        FROM DIARY_LIKES
        WHERE DIARY_ID = #{diaryId}
    </select>

    <!-- 결과 맵핑 -->
    <resultMap id="diaryResultMap" type="com.future.blue.diary.vo.DiaryVO">
        <result property="diaryId" column="DIARY_ID"/>
        <result property="diaryWriter" column="DIARY_WRITER"/>
        <result property="diaryTitle" column="DIARY_TITLE"/>
        <result property="diaryContents" column="DIARY_CONTENTS"/>
        <result property="createDt" column="CREATE_DT"/>
        <result property="updateDt" column="UPDATE_DT"/>
        <result property="memId" column="MEM_ID"/>
        <result property="diaryHit" column="DIARY_HIT"/>
        <result property="useYn" column="USE_YN"/>
        <result property="diaryImage" column="DIARY_IMAGE"/>
    </resultMap>

    <resultMap id="diaryWithLikesResultMap" type="com.future.blue.diary.vo.DiaryVO">
        <result property="diaryId" column="DIARY_ID"/>
        <result property="diaryWriter" column="DIARY_WRITER"/>
        <result property="diaryTitle" column="DIARY_TITLE"/>
        <result property="diaryContents" column="DIARY_CONTENTS"/>
        <result property="createDt" column="CREATE_DT"/>
        <result property="updateDt" column="UPDATE_DT"/>
        <result property="memId" column="MEM_ID"/>
        <result property="diaryHit" column="DIARY_HIT"/>
        <result property="useYn" column="USE_YN"/>
        <result property="diaryImage" column="DIARY_IMAGE"/>
        <result property="likerId" column="LIKER_ID"/>
    </resultMap>

</mapper>
