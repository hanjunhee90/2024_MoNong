<%@ page language="java" contentType="text/html; charset=UTF-8"
	pageEncoding="UTF-8"%>
<%@ taglib uri="http://java.sun.com/jsp/jstl/core" prefix="c"%>
<%@ page session="false"%>
<!DOCTYPE html>
<html lang="ko">
<head>
<meta charset="UTF-8">
<meta name="viewport" content="width=device-width, initial-scale=1.0">
<title>채팅 화면</title>
<style>
/* 공통 스타일 */
body {
  background-color: #f9f9f9;
  /* Bootstrap .container가 있으므로 margin: 0; padding: 0; 정도로만 해도 됨 */
}

/* .container는 Bootstrap 5에서 자동으로 양옆 여백 + 반응형 정렬 제공 */

/* 채팅 영역: 최대 폭 지정 + 중앙 정렬 */
.chat-container {
  margin: 0 auto;
  padding: 15px;
  background-color: #fff;
  border-radius: 8px;
  /* 약간의 그림자 (옵션) */
  box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}

/* 메시지 목록 */
.chat-container ul {
  list-style: none; /* 불릿 제거 */
  padding-left: 0;
  margin: 0;
}

.chat-container ul li {
  margin-bottom: 10px; /* 메시지 간격 */
  font-size: 14px;     /* 폰트 크기 살짝 줄임 */
}

.chat-box {
  font-size: 14px;
  line-height: 1.4;
  padding: 8px 10px;
  border-radius: 6px;
  margin: 0;  /* p 태그 기본 마진 제거 */
}

/* 아이디(닉네임) 스타일 */
.chat-container li strong {
  font-size: 14px;
  font-weight: 600;
  margin-right: 5px;
}

/* 입력창도 비슷하게 최대폭 800px 맞춰서 깔끔하게 */
.input-container {
  max-width: 800px;
  margin: 0 auto;
  display: flex;
  align-items: center;
  background-color: #f4f4f4;
  border-top: 1px solid #ddd;
  padding: 10px;
  /* etc... */
}

/* 상태 바 */
.status-bar {
	background-color: #4CAF50;
	color: white;
	display: 10px;
	justify-content: space-between;
	align-items: center;
	font-weight: bold;
	font-size: 1rem;
}

/* 물품 정보 */
.item-info {
	display: flex;
	align-items: center;
	background-color: white;
	padding: 15px;
	border-bottom: 1px solid #ddd;
}
.item-info img {
	width: 100px;
	height: 100px;
	border-radius: 10px;
	margin-right: 15px;
	object-fit: cover;
}
.item-details {
	flex: 1;
}
.item-details div {
	margin: 5px 0;
	font-size: 14px;
}
.item-details .title {
	font-size: 1.1rem;
	font-weight: bold;
}

/* 채팅 영역 */
.chat-container {
	flex: 1;
	overflow-y: auto;
	padding: 10px;
	background-color: #fff;
}
.message {
	display: flex;
	margin-bottom: 15px;
	font-size: 14px;
	align-items: center;
}
.message img {
	width: 40px;
	height: 40px;
	border-radius: 50%;
	margin-right: 10px;
	object-fit: cover;
}
.message.right {
	justify-content: flex-end;
}
.message .content {
	max-width: 60%;
	padding: 10px;
	border-radius: 10px;
	background-color: #f1f1f1;
	position: relative;
}
.message.right .content {
	background-color: #4CAF50;
	color: white;
}
.message .time {
	font-size: 10px;
	color: #888;
	margin-left: 5px;
}


.input-container button {
	background: none;
	border: none;
	margin-left: 10px;
	cursor: pointer;
}
.input-container button img {
	width: 25px;
	height: 25px;
}
.input-container input {
	flex: 1;
	padding: 10px;
	margin: 10px;
	border-radius: 20px;
	border: 1px solid #ddd;
	outline: none;
	font-size: 14px;
}

.me {
	text-align: right;
}
.back-button {
	margin-right: 10px; /* 뒤로가기 버튼과 아이디 사이에 간격을 추가 */
}
.chat-seller {
	margin-left: 5px; /* 아이디를 왼쪽에 고정 */
}
.trust-level {
	margin-left: 10px; /* 신뢰도와 아이디 사이에 간격을 추가 */
}

/* 거래 진행도 스타일 */
.progress {
    display: flex;
    justify-content: space-evenly;
    align-items: center;
    margin-bottom: 20px;
    padding: 10px 20px;
    background-color: #E8F5E9;
    border-radius: 15px;
    box-shadow: 0 2px 5px rgba(0, 0, 0, 0.1);
}
.progress button {
    width: 150px;
    height: 50px;
    text-align: center;
    font-size: 16px;
    font-weight: bold;
    color: white;
    cursor: pointer;
    background: linear-gradient(135deg, #FFEB3B, #FFC107);
    border: 2px solid #FFD54F;
    border-radius: 25px;
    padding: 5px 15px;
    transition: all 0.3s ease;
    box-shadow: 0 3px 5px rgba(0, 0, 0, 0.2);
}
.progress button:hover {
    background: linear-gradient(135deg, #FFC107, #FFA000);
    border-color: #FFB300;
}
.progress button.active {
    background: linear-gradient(135deg, #66BB6A, #43A047);
    border: 2px solid #388E3C;
    box-shadow: 0 4px 6px rgba(0, 0, 0, 0.3);
}
.progress button.disabled {
    background: linear-gradient(135deg, #C8E6C9, #A5D6A7);
    color: #ffffff;
    cursor: not-allowed;
    border: 2px dashed #A5D6A7;
}

/* 약속 메시지 스타일 */
.appointment-message {
  background-color: #ffeb3b;
  color: #333;
  padding: 10px;
  border-radius: 10px;
  font-weight: bold;
  text-align: center;
  margin: 10px 0;
}
/* 확인 버튼 스타일 */
.confirm-button {
  background-color: #4CAF50;
  color: white;
  border: none;
  border-radius: 5px;
  padding: 5px 10px;
  font-size: 14px;
  cursor: pointer;
}
.confirm-button:hover {
  background-color: #45a049;
}

/* 모달 전체 컨테이너 */
.image-modal {
  position: fixed;       /* 화면 고정 */
  top: 0;
  left: 0;
  width: 100%;
  height: 100%;
  z-index: 1000;         /* 다른 요소들보다 위 */
  display: none;         /* 처음엔 숨김 */
}

/* 반투명 배경 오버레이 */
.modal-overlay {
  position: absolute;
  top: 0; 
  left: 0;
  width: 100%;
  height: 100%;
  background-color: rgba(0, 0, 0, 0.6);
}

/* 모달 내용 박스 */
.modal-content {
  position: relative;  
  width: 60%;         /* 모달 가로 크기 (원하는 값) */
  max-width: 50%;       /* 화면이 좁을 땐 90%까지 줄이기 */
  margin: 5% auto;      /* 수직으로 조금 내려서, 수평 중앙 정렬 */
  background-color: #fff;
  border-radius: 10px;
  overflow: hidden;     /* 내용이 넘치면 숨김 */
  box-shadow: 0 4px 10px rgba(0, 0, 0, 0.5);
}

/* 닫기 버튼 */
.modal-close-button {
  position: absolute;
  top: 10px;
  right: 10px;
  background-color: #fff;  /* 버튼 배경 */
  color: #333;
  border: none;
  border-radius: 3px;
  font-size: 20px;
  cursor: pointer;
  width: 35px;
  height: 35px;
  text-align: center;
  line-height: 30px;
  padding: 0;
}
.modal-close-button:hover {
  background-color: #eee;
}

/* 이미지 자체에 대한 제한 */
.modal-content img {
  display: block;            /* 중앙 정렬 보조 */
  max-width: 50%;          /* 모달 너비에 맞춰서 */
  height: auto;
}

/* 반응형 */
@media ( max-width : 768px) {
	.progress button {
		font-size: 10px;
		padding: 8px;
	}
	body {
		font-family: Arial, sans-serif;
		background-color: #f9f9f9;
		height: 100vh;
		display: flex;
		flex-direction: column;
		margin: 0;
	}
	.item-info img {
		width: 80px;
		height: 80px;
	}
	.message .content {
		max-width: 80%;
	}
	.progress div {
		font-size: 10px;
	}
	
}
</style>
</head>

<body id="page-top">
<jsp:include page="/WEB-INF/inc/common/header.jsp"></jsp:include>
<jsp:include page="/WEB-INF/inc/modal/promiseModal.jsp"></jsp:include>

<div class="container mt-5">
  <!-- 전역 memId/chatId 설정 -->
  <c:set var="memId" value="${userInfo.memId}" />

  <!-- 상태 바 -->
  <div class="status-bar" style="background-color: #4CAF50; color: white; padding: 10px;">
    <button class="back-button" onclick="history.back()">←</button>
    <span class="chat-seller">아이디: ${roomView.chatSeller}</span> 
    <span class="trust-level">신뢰도: ${roomView.memReliability != null ? roomView.memReliability : 0}</span>
  </div>

  <!-- 물품 정보 -->
  <div class="item-info d-flex align-items-center" style="background-color:white;padding:15px;border-bottom:1px solid #ddd;">
    <div class="image-container" style="flex: 1; max-width: 30%; text-align: center;">
      <img src="${roomView.prodPhotoPath}" alt="상품 이미지" style="max-width:100%; height:auto; object-fit:cover; border-radius:8px;">
    </div>
    <div class="details-container" style="flex: 2; padding-left:20px;">
      <div class="title" style="font-size:1.5rem; font-weight:bold;">${roomView.prodName}</div>
      <div style="font-size:1.2rem; margin-top:0.5rem;">${roomView.prodPrice}원</div>
      <div style="font-size:1rem; color:#555; margin-top:0.5rem;">${roomView.prodPlace}</div>
    </div>
  </div>

  <!-- 거래 진행도 -->
  <div class="progress" id="progress">
    <button id="appointmentForm" class="progress-step" onclick="handleAppointment()">약속잡기</button>
    <button id="completeButton" class="progress-step disabled" onclick="handleComplete()">거래완료</button>
    <button id="reviewButton" class="progress-step disabled" onclick="handleReview()">후기 보내기</button>
  </div>

  <!-- 채팅 영역 -->
  <div class="chat-container" style="padding:10px;background-color:#fff;">
    <div class="content chatcontent" data-room-no="">
      <!-- 기존 채팅 로그 (메시지) 뿌리기 -->
      <c:forEach var="chat" items="${chatList}">
        <c:if test="${memId eq chat.tmSender}">
          <ul style="list-style:none; margin:0; padding:0;">
            <li style="margin-bottom:10px;">
              <strong>${chat.tmSender }</strong>
              <img src="${chat.tmImgPath }" width="50" style="border-radius:50%;">
              <div>
                <c:choose>
                  <c:when test="${chat.tmContentType eq 'TEXT'}">
                    <p class="chat-box text-left p-3">${chat.tmContent }</p>
                  </c:when>
                  <c:when test="${chat.tmContentType eq 'IMG'}">
                    <img src="${chat.tmContent }" width="100" style="cursor:pointer;" onclick="openImageInNewTab('${chat.tmContent}')">
                  </c:when>
                  <c:when test="${chat.tmContentType eq 'APPOINTMENT'}">
                    <span class="appointment-message">${chat.tmContent }</span>
                    <c:if test="${chat.tmStatus eq 'REQUEST'}">
                      <span style="color:orange;">(약속 요청중)</span>
                    </c:if>
                    <c:if test="${chat.tmStatus eq 'R'}">
                      <span style="color:green;font-weight:bold;">(예약중)</span>
                    </c:if>
                    <c:if test="${chat.tmStatus eq 'C_REQ'}">
                      <span style="color:blue;font-weight:bold;">(거래완료 요청)</span>
                    </c:if>
                    <c:if test="${chat.tmStatus eq 'C'}">
                      <span style="color:red;font-weight:bold;">(거래완료)</span>
                    </c:if>
                  </c:when>
                </c:choose>
                <br>
                <strong>${chat.tmDate }</strong>
              </div>
            </li>
          </ul>
        </c:if>

        <c:if test="${memId ne chat.tmSender}">
          <!-- 상대방 메시지 -->
          <ul style="list-style:none; margin:0; padding:0;">
            <li style="margin-bottom:10px;">
              <strong>${chat.tmSender }</strong>
              <img src="${chat.tmImgPath }" width="50" style="border-radius:50%;">
              <div>
                <c:choose>
                  <!-- TEXT -->
                  <c:when test="${chat.tmContentType eq 'TEXT'}">
                    <p class="chat-box bg-light p-3">${chat.tmContent }</p>
                  </c:when>
                  <!-- IMG -->
                  <c:when test="${chat.tmContentType eq 'IMG'}">
                    <img src="${chat.tmContent }" width="100" style="cursor:pointer;" onclick="openImageInNewTab('${chat.tmContent}')">
                  </c:when>
                  <!-- APPOINTMENT -->
                  <c:when test="${chat.tmContentType eq 'APPOINTMENT'}">
                    <span class="appointment-message">${chat.tmContent }</span>
                    <c:if test="${chat.tmStatus eq 'REQUEST'}">
                      <!-- 내가 보낸게 아니므로, 여기서 [확인] 버튼 표시 -->
                      <button class="confirm-button" onclick="confirmAppointment('${chat.tmChatId}')">확인</button>
                    </c:if>
                    <c:if test="${chat.tmStatus eq 'R'}">
                      <span style="color:green;font-weight:bold;">(예약중)</span>
                    </c:if>
                    <c:if test="${chat.tmStatus eq 'C_REQ'}">
                      <span style="color:blue;font-weight:bold;">(거래완료 요청)</span>
                    </c:if>
                    <c:if test="${chat.tmStatus eq 'C'}">
                      <span style="color:red;font-weight:bold;">(거래완료)</span>
                    </c:if>
                  </c:when>
                </c:choose>
                <br>
                <strong>${chat.tmDate }</strong>
              </div>
            </li>
          </ul>
        </c:if>
      </c:forEach>
    </div>
  </div>

  <!-- 입력창 -->
  <div class="input-container" style="display:flex;align-items:center;padding:10px;background-color:#f4f4f4;border-top:1px solid #ddd;">
    <button id="addImageButton" style="background:none;border:none;margin-left:10px;cursor:pointer;">
      <img src="https://cdn-icons-png.flaticon.com/512/1828/1828817.png" alt="추가 버튼" style="width:25px;height:25px;">
    </button>
    <input type="file" id="fileInput" accept="image/*" style="display:none;">
    <input type="text" id="msgi" placeholder="메시지를 입력해주세요"
           style="flex:1;padding:10px;margin:10px;border-radius:20px;border:1px solid #ddd;outline:none;font-size:14px;">

    <button class="emoji-button" style="background:none;border:none;cursor:pointer;">
      <img src="https://cdn-icons-png.flaticon.com/512/742/742751.png" alt="이모티콘" style="width:25px;height:25px;">
    </button>

    <button id="btnSend" style="background:none;border:none;cursor:pointer;">
      <img src="https://cdn-icons-png.flaticon.com/512/786/786205.png" alt="전송" style="width:25px;height:25px;">
    </button>
  </div>

</div> <!-- container 끝 -->

<!-- 이미지 모달 (클릭 확대) -->
<div id="imageModal" class="image-modal">
  <button class="modal-close-button" onclick="closeModal()">닫기</button>
  <img id="modalImage" class="modal-content" />
</div>

<!-- jQuery, SockJS, stomp.js 로딩 (Bootstrap JS 등 필요하면 추가) -->
<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>
<script src="https://cdn.jsdelivr.net/npm/sockjs-client/dist/sockjs.min.js"></script>
<script src="https://cdnjs.cloudflare.com/ajax/libs/stomp.js/2.3.3/stomp.min.js"></script>

<script>
  // 전역 변수
  var tmChatId = "${chatId}";
  var memId = "${memId}";
  var memNm = "테스트 사용자"; // 필요 시 세션 등에서 닉네임 가져오기
  var client = null;

  // tmStatus: N(없음), REQUEST, R(예약중), C_REQ(한쪽만 거래완료), C(최종완료)
  var tmStatus = "${roomView.tmStatus != null ? roomView.tmStatus : 'N'}";

  // ========== 소켓 연결 ==========
  $(document).ready(function() {
    var sock = new SockJS("/endpoint");
    client = Stomp.over(sock);

    client.connect({ "userId": memId, "tmChatId": tmChatId }, function() {
      console.log("WebSocket 연결 성공");

      // 구독
      client.subscribe("/subscribe/chat/" + tmChatId, function(chat) {
        var body = JSON.parse(chat.body);
        console.log("받은 메시지:", body);

        var messageHtml = renderList(body);
        // 마지막 ul에 붙이거나, .content에 append
        $(".chatcontent ul:last").append(messageHtml);

        scrollDown();

        // 약속/거래 상태에 따른 tmStatus 업데이트
        if (body.tmContentType === "APPOINTMENT") {
          if (body.tmStatus === "REQUEST") {
            tmStatus = "REQUEST";
            // "약속잡기" 버튼 등...
          }
          else if (body.tmStatus === "R") {
            tmStatus = "R";
            $("#appointmentForm").addClass("disabled");
            $("#completeButton").removeClass("disabled");
          }
          else if (body.tmStatus === "C_REQ") {
            tmStatus = "C_REQ";
            // "거래완료" 버튼 다시 누르면 최종완료 => handleComplete() logic
            $("#completeButton").removeClass("disabled");
          }
          else if (body.tmStatus === "C") {
            tmStatus = "C";
            $("#completeButton").addClass("disabled");
            $("#reviewButton").removeClass("disabled");
          }
        }
      });
    }, function(error) {
      console.error("WebSocket 연결 실패:", error);
      alert("채팅 서버와 연결할 수 없습니다.");
    });

    // 전송 버튼
    $("#btnSend").click(sendMessage);
    $("#msgi").keydown(function(e) {
      if (e.keyCode === 13) {
        sendMessage();
      }
    });

    // 이미지 버튼
    $("#addImageButton").click(function() {
      $("#fileInput").click();
    });
    // 파일 업로드
    $("#fileInput").change(function(e) {
      var file = e.target.files[0];
      if (!file) return;

      var fileType = file.type;
      var validTypes = ["image/jpeg","image/png","image/gif","image/jpg"];
      if (!validTypes.includes(fileType)) {
        alert("이미지 파일만 업로드 가능합니다.");
        $(this).val('');
        return;
      }
      var formData = new FormData();
      formData.append('file', file);
      formData.append('tmSender', memId);
      formData.append('tmChatId', tmChatId);

      $.ajax({
        url: "<c:url value='/files/upload' />",
        type: "POST",
        data: formData,
        dataType: "json",
        processData: false,
        contentType: false,
        success: function(res) {
          // 업로드 성공 -> stomp 전송
          client.send("/app/hello/" + tmChatId, {}, JSON.stringify({
            tmContent: res.imagePath,
            tmSender: memId,
            tmContentType: "IMG",
            tmChatId: tmChatId
          }));
        }, error: function(err) {
          console.log(err);
        }
      });
    });
  });

  // ========== 일반 메시지 전송 ==========
  function sendMessage() {
    var msg = $("#msgi").val().trim();
    if (msg === "") return;

    client.send("/app/hello/" + tmChatId, {}, JSON.stringify({
      tmContent: msg,
      tmSender: memId,
      tmContentType: "TEXT",
      tmChatId: tmChatId
    }));
    $("#msgi").val('');
  }

  // ========== 메시지 렌더링 ==========
  function renderList(vo) {
    var content = "";
    // 약속 메시지
    if (vo.tmContentType === "APPOINTMENT") {
      // 상태: REQUEST, R, C_REQ, C
      if (vo.tmStatus === "REQUEST") {
        content = "<span class='appointment-message'>" + vo.tmContent + "</span>";
        if (vo.tmSender !== memId) {
          content += " <button class='confirm-button' onclick=\"confirmAppointment('" + vo.tmChatId + "')\">확인</button>";
        } else {
          content += " <span style='color:orange;'>(요청중)</span>";
        }
      }
      else if (vo.tmStatus === "R") {
        content = "<span class='appointment-message'>" + vo.tmContent + "</span>"
                + " <span style='color:green;font-weight:bold;'>(예약중)</span>";
      }
      else if (vo.tmStatus === "C_REQ") {
        content = "<span class='appointment-message'>" + vo.tmContent + "</span>"
                + " <span style='color:blue;font-weight:bold;'>(거래완료 요청)</span>";
      }
      else if (vo.tmStatus === "C") {
        content = "<span class='appointment-message'>" + vo.tmContent + "</span>"
                + " <span style='color:red;font-weight:bold;'>(거래완료)</span>";
      } else {
        content = "<span class='appointment-message'>" + vo.tmContent + "</span>";
      }
    }
    // 이미지
    else if (vo.tmContentType === "IMG") {
      content = "<img src='" + vo.tmContent + "' width='100' style='cursor:pointer;' onclick=\"openImageInNewTab('" + vo.tmContent + "')\">";
    }
    // 텍스트
    else {
      content = "<p class='chat-box'>" + vo.tmContent + "</p>";
    }

    var str = "";
    if (vo.tmSender === memId) {
      // 내가 보낸
      str = "<li style='margin-bottom:10px;'>"
          + "<strong>" + vo.tmSender + "</strong>"
          + "<div>" + content + "</div>"
          + "<strong>" + (vo.tmDate || '') + "</strong>"
          + "</li>";
    } else {
      // 상대방
      str = "<li style='margin-bottom:10px;'>"
          + "<strong>" + vo.tmSender + "</strong>"
          + "<div>" + content + "</div>"
          + "<strong>" + (vo.tmDate || '') + "</strong>"
          + "</li>";
    }
    return str;
  }

  // 스크롤 맨 아래로
  function scrollDown() {
    var container = document.querySelector(".chat-container");
    container.scrollTop = container.scrollHeight;
  }

  // ========== 약속잡기 버튼 ==========
  function handleAppointment() {
    if (tmStatus === "R" || tmStatus === "C_REQ" || tmStatus === "C") {
      alert("이미 약속 중이거나 완료된 채팅방입니다!");
      return;
    }
    // Bootstrap 모달 열기
    const modal = new bootstrap.Modal(document.getElementById("promiseModal"));
    modal.show();
  }

  // ========== 약속 확인 ==========
  function confirmAppointment(chatId) {
    client.send("/app/hello/" + chatId, {}, JSON.stringify({
      tmContent: "약속 확인되었습니다.",
      tmSender: memId,
      tmContentType: "APPOINTMENT",
      tmStatus: "R",       // 예약중
      tmChatId: chatId
    }));
  }

  // ========== 거래완료 버튼 (두 단계) ==========
  function handleComplete() {
    // 만약 tmStatus가 'R'이면, 먼저 "C_REQ" 전송
    // 만약 이미 'C_REQ'이면, 두 번째 눌러서 최종 'C'로 전송
    if (tmStatus === "R") {
      // 첫 번째 거래완료 요청
      client.send("/app/hello/" + tmChatId, {}, JSON.stringify({
        tmContent: "거래 완료 요청",
        tmSender: memId,
        tmContentType: "APPOINTMENT",
        tmStatus: "C_REQ",
        tmChatId: tmChatId
      }));
    }
    else if (tmStatus === "C_REQ") {
      // 두 번째 -> 최종 완료
      client.send("/app/hello/" + tmChatId, {}, JSON.stringify({
        tmContent: "거래 완료",
        tmSender: memId,
        tmContentType: "APPOINTMENT",
        tmStatus: "C",
        tmChatId: tmChatId
      }));
    }
    else {
      alert("약속이 진행중이 아니거나, 이미 완료된 상태입니다!");
    }
  }

  // ========== 후기 버튼 ==========
  function handleReview() {
    if (tmStatus !== "C") {
      alert("거래가 최종 완료되어야 후기를 작성할 수 있습니다!");
      return;
    }
    console.log("후기 작성 로직");
    // TODO: /review/write 로 이동 or 후기 모달 열기
  }

  // ========== 이미지 모달 ==========
  function openImageInNewTab(imageSrc) {
    window.open(imageSrc, "_blank");
  }

  function openModal(imageSrc) {
    $("#modalImage").attr("src", imageSrc);
    $("#imageModal").fadeIn();
  }
  function closeModal() {
    $("#imageModal").fadeOut();
  }
</script>
</body>
</html>