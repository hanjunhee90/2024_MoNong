import cx_Oracle
import pandas as pd
import numpy as np
from sklearn.preprocessing import MinMaxScaler
from tensorflow.keras.models import load_model

# 오라클 데이터베이스 연결
connection = cx_Oracle.connect('blue', 'blue', '192.168.0.44:1521/xe')

# SQL 쿼리
query = """
SELECT 
    dpp.prce_reg_ymd, 
    pdlt_nm, 
    AVG(dpp.avrg_prce) AS avg_avrg_prce,
    MAX(ar.ta_avg) AS ta_avg,
    MAX(ar.rn_day) AS rn_day,
    COUNT(DISTINCT oi.observation_point) AS observation_point_count
FROM daily_product_prices2 dpp
JOIN api_response ar
    ON dpp.prce_reg_ymd = ar.tm
JOIN observation_info oi
    ON ar.stn = oi.observation_id
WHERE ar.rn_day != '-9.0'
      AND ar.ta_avg != '-99.0'
      AND dpp.pdlt_ctg_code IN ('100', '200', '300', '400')
      AND pdlt_nm = '토마토'
      AND spcs_nm LIKE '%(전체)%'
      AND exmn_se_nm = '도매'
      AND grad_nm = '상품'
GROUP BY dpp.prce_reg_ymd, pdlt_nm
ORDER BY dpp.prce_reg_ymd ASC
"""

# 데이터 가져오기
df = pd.read_sql(query, con=connection)

# 열 이름 확인 (디버깅용)
print(df.columns)

# 날짜 컬럼을 datetime 타입으로 변환
df['PRCE_REG_YMD'] = pd.to_datetime(df['PRCE_REG_YMD'])

# 필요한 컬럼만 사용
df = df[['PRCE_REG_YMD', 'AVG_AVRG_PRCE', 'TA_AVG', 'RN_DAY']]

# 결측치 처리
df = df.dropna()

# 데이터 스케일링
scaler = MinMaxScaler()
scaled_data = scaler.fit_transform(df[['AVG_AVRG_PRCE', 'TA_AVG', 'RN_DAY']])

# 최근 30일 데이터 추출
recent_days_raw = scaled_data[-300:, :-1]  # 내림차순 정렬된 상태에서 상위 30개 데이터
recent_days = recent_days_raw.reshape(1, 300, recent_days_raw.shape[1])

# 모델 로드
model_filename = "pricePrediction(tomato).keras"  # 모델 파일명
model = load_model(model_filename)

# 예측 결과 저장
predictions = []

# 하루씩 예측 (1일, 2일, 3일, ..., 7일)
current_input_data = recent_days.copy()  # 첫날의 데이터로 시작

for i in range(7):  # 1일부터 7일까지 예측
    # 예측
    predicted_price = model.predict(current_input_data)

    # 예측된 시세를 3개의 특성에 맞게 (1, 3) 형태로 확장
    predicted_price_for_inverse_transform = np.concatenate([predicted_price, np.zeros((predicted_price.shape[0], 2))],
                                                           axis=1)

    # 역변환 (예측된 시세만 역변환)
    predicted_price_rescaled = scaler.inverse_transform(predicted_price_for_inverse_transform[:, :3])  # 첫 3개의 특성만 사용

    # 예측된 시세를 일의 자리에서 반올림
    rounded_price = round(predicted_price_rescaled[0][0], 0)
    predictions.append(rounded_price)

    # 다음 날 예측을 위해 예측된 값으로 입력 데이터 업데이트
    current_input_data = np.roll(current_input_data, -1, axis=1)  # 데이터를 한 칸씩 왼쪽으로 밀고
    current_input_data[0, -1, 0] = predicted_price_rescaled[0][0]  # 예측된 값으로 업데이트

# 예측 결과 출력 (소수점 없이)
print("예측 시세: ", [int(x) for x in predictions])

# 연결 종료
connection.close()