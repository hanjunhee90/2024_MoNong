/**
 * DAO, DTO 차이
 * DAO → 데이터베이스 데이터 처리. (상호작용)
 * DTO → 데이터를 클라이언트나 다른 계층으로 전달함. (데이터 전송) **/

package com.future.blue.board.dao;

import java.util.List;

import org.apache.ibatis.annotations.Mapper;
import org.apache.ibatis.annotations.Param;

// VO 클래스 임포트
import com.future.blue.board.vo.BoardCommentVO;
import com.future.blue.board.vo.BoardFileVO;
import com.future.blue.board.vo.BoardLikeVO;
import com.future.blue.board.vo.BoardVO;
import com.future.blue.board.vo.SearchVO;


@Mapper
public interface BoardDAO {

	// 게시글 목록 조회
    List<BoardVO> getBoardListPaged(SearchVO searchVO);

    // 게시글 상세 조회
    BoardVO getBoardDetail(int boardId);

    // 게시글 작성
    int createBoard(BoardVO board);

    // 게시글 수정
    int updateBoard(BoardVO board);

    // 게시글 삭제
    int deleteBoard(int boardId);

    // 댓글 작성
    int addComment(BoardCommentVO comment);

    // 좋아요 추가
    int addLike(BoardLikeVO like);

    // 좋아요 제거
    int removeLike(BoardLikeVO like);

    // 게시글의 총 개수 (검색 조건에 맞게)
    int getTotalCount(SearchVO searchVO);

    // 조회수 증가 메서드 추가
    int increaseBoardHit(@Param("boardId") int boardId);
    
    // 파일 처리 관련 메서드
    int addBoardFile(BoardFileVO file); // 파일 추가
    List<BoardFileVO> getBoardFiles(int boardId); // 특정 게시글의 파일 목록 조회

    // 댓글 처리 관련 메서드
    List<BoardCommentVO> getComments(int boardId); // 특정 게시글의 댓글 목록 조회
    int deleteComment(int commentId); // 댓글 삭제

    // 좋아요 처리 관련 메서드
    int getLikeCount(int boardId); // 특정 게시글의 좋아요 수 조회
    int isLikedByUser(@Param("boardId") int boardId, @Param("memId") String memId); // 특정 사용자의 좋아요 여부 확인

}

