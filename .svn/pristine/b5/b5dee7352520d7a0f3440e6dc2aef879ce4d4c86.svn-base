package com.future.blue.push.web;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

import com.future.blue.push.dao.SubscriptionDAO;
import com.future.blue.push.vo.SubscriptionVO;

@RestController
@RequestMapping("/api")
public class PwaController {

    @Autowired
    private SubscriptionDAO subscriptionDao;

    /**
     * 푸시 알림 구독 등록
     * @param subscriptionVO 구독 요청 정보
     * @return HTTP 상태 코드
     */
    @PostMapping("/subscribe")
    public ResponseEntity<Void> subscribe(@RequestBody SubscriptionVO subscriptionVO) {
        try {
            subscriptionDao.insertSubscription(subscriptionVO);
            return ResponseEntity.status(HttpStatus.CREATED).build(); // 구독 성공 시 201 반환
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // 에러 발생 시 500 반환
        }
    }

    /**
     * 특정 사용자 구독 정보 조회
     * @param userId 사용자 ID
     * @return 구독 정보
     */
    @GetMapping("/subscription/{userId}")
    public ResponseEntity<SubscriptionVO> getSubscription(@PathVariable String userId) {
        SubscriptionVO subscription = subscriptionDao.getSubscriptionByUserId(userId);
        if (subscription != null) {
            return ResponseEntity.ok(subscription);
        } else {
            return ResponseEntity.status(HttpStatus.NOT_FOUND).build(); // 구독 정보가 없는 경우 404 반환
        }
    }

    /**
     * 모든 구독 정보 조회
     * @return 모든 구독 정보 리스트
     */
    @GetMapping("/subscriptions")
    public ResponseEntity<?> getAllSubscriptions() {
        try {
            return ResponseEntity.ok(subscriptionDao.getAllSubscriptions());
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build();
        }
    }

    /**
     * 구독 삭제
     * @param userId 사용자 ID
     * @return HTTP 상태 코드
     */
    @DeleteMapping("/subscription/{userId}")
    public ResponseEntity<Void> deleteSubscription(@PathVariable String userId) {
        try {
            subscriptionDao.deleteSubscription(userId);
            return ResponseEntity.noContent().build(); // 삭제 성공 시 204 반환
        } catch (Exception e) {
            e.printStackTrace();
            return ResponseEntity.status(HttpStatus.INTERNAL_SERVER_ERROR).build(); // 에러 발생 시 500 반환
        }
    }
}